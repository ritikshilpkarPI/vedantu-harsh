import React, { useState, useEffect } from 'react';
import { BrowserRouter, Routes, Route, useParams } from 'react-router-dom';
import './App.css';
import AdminLogin from './AdminLogin';
import AdminPanel from './AdminPanel';

// Default Configuration - Vedantu Channel for Harsh Priyam Master Teacher
const DEFAULT_SETTINGS = {
  youtubeChannelId: 'UC91RZv71f8p0VV2gaFI07pg',
  youtubeChannelName: 'Harsh Priyam - Vedantu Master Teacher',
  youtubeSubscribeUrl: 'https://www.youtube.com/channel/UC91RZv71f8p0VV2gaFI07pg?sub_confirmation=1',
  pdfDownloadUrl: 'https://vdnt.in/short?q=H2a8P'
};

function MainApp() {
  return (
    <div className="App">
      <div className="hero">
        <div className="container">
          <h1>YouTube Subscription Gate</h1>
          <p>Access exclusive educational content through generated links</p>
        </div>
      </div>

      <div className="container">
        <div className="simple-layout">
          <div className="main-card">
            <div className="card-header">
              <h2>ðŸ”’ Access Required</h2>
              <p>This page requires a valid access link to view content</p>
            </div>

            <div className="disabled-notice">
              <div className="notice-icon">ðŸš«</div>
              <h3>Direct Access Not Allowed</h3>
              <p>To access the subscription and download features, you need a valid link generated by an administrator.</p>
              <p>If you have a valid link, please use that instead of accessing this page directly.</p>
            </div>

            <div className="two-button-layout">
              <button 
                className="btn btn-subscribe"
                disabled
                title="Requires valid access link"
              >
                ðŸ“º Subscribe to Channel
              </button>
              
              <button 
                className="btn btn-download"
                disabled
                title="Requires valid access link"
              >
                ðŸ“„ Download PDF
              </button>
            </div>

            <div className="instructions">
              <p><strong>How to get access:</strong></p>
              <ol>
                <li>Contact the administrator for a valid access link</li>
                <li>Use the provided link to access the subscription page</li>
                <li>Follow the instructions on that page to download your PDF</li>
              </ol>
              <p className="contact-note">
                <strong>Note:</strong> Each access link is unique and provides access to specific content.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function AdminRoute() {
  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Check if user is already logged in
    const adminSession = localStorage.getItem('adminSession');
    const sessionExpiry = localStorage.getItem('adminSessionExpiry');
    
    if (adminSession && sessionExpiry) {
      const now = new Date().getTime();
      const expiry = parseInt(sessionExpiry);
      
      if (now < expiry) {
        // Session is still valid
        setIsAdminLoggedIn(true);
      } else {
        // Session expired, clear it
        localStorage.removeItem('adminSession');
        localStorage.removeItem('adminSessionExpiry');
      }
    }
    
    setIsLoading(false);
  }, []);

  const handleAdminLogin = (success) => {
    if (success) {
      // Set session for 24 hours
      const expiry = new Date().getTime() + (24 * 60 * 60 * 1000);
      localStorage.setItem('adminSession', 'true');
      localStorage.setItem('adminSessionExpiry', expiry.toString());
      setIsAdminLoggedIn(true);
    }
  };

  const handleAdminLogout = () => {
    // Clear session
    localStorage.removeItem('adminSession');
    localStorage.removeItem('adminSessionExpiry');
    setIsAdminLoggedIn(false);
  };

  if (isLoading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        fontSize: '1.2rem',
        color: '#666'
      }}>
        Loading...
      </div>
    );
  }

  if (isAdminLoggedIn) {
    return <AdminPanel onLogout={handleAdminLogout} />;
  } else {
    return <AdminLogin onLogin={handleAdminLogin} />;
  }
}

function ConfigurableApp() {
  const { configId } = useParams();
  const [hasSubscribed, setHasSubscribed] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [message, setMessage] = useState('');
  const [settings, setSettings] = useState(DEFAULT_SETTINGS);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // More aggressive detection and redirect
    const forceRedirectToActualBrowser = () => {
      const userAgent = navigator.userAgent.toLowerCase();
      const currentUrl = window.location.href;
      
      // Check if we're in any kind of embedded/in-app browser
      const isEmbedded = 
        // YouTube app indicators
        userAgent.includes('youtubeapp') ||
        userAgent.includes('youtube') ||
        // WebView indicators
        userAgent.includes('wv') ||
        userAgent.includes('webview') ||
        // Social media apps
        userAgent.includes('instagram') ||
        userAgent.includes('fban') ||
        userAgent.includes('fbav') ||
        userAgent.includes('twitter') ||
        userAgent.includes('tiktok') ||
        // Generic in-app browser indicators
        window.navigator.standalone === false ||
        // Check if window.open is restricted (common in embedded browsers)
        !window.open ||
        // Check for missing browser APIs that are restricted in WebViews
        !window.history.pushState;
      
      // Also check if we're in an iframe or popup
      const isInFrame = window.self !== window.top;
      
      if (isEmbedded || isInFrame) {
        // Immediate redirect - don't wait
        console.log('Detected embedded browser, redirecting...');
        
        // Try the most reliable method first - replace the current location
        if (userAgent.includes('android')) {
          // Android Chrome intent
          window.location.replace(`intent://${window.location.host}${window.location.pathname}${window.location.search}#Intent;scheme=https;package=com.android.chrome;S.browser_fallback_url=${encodeURIComponent(currentUrl)};end`);
        } else if (userAgent.includes('iphone') || userAgent.includes('ipad')) {
          // iOS Safari
          window.location.replace(currentUrl);
        } else {
          // Desktop or other - try to open in new window and redirect current
          window.open(currentUrl, '_blank', 'noopener,noreferrer');
          window.location.replace(currentUrl);
        }
        
        return true;
      }
      
      return false;
    };

    // Try redirect immediately
    if (forceRedirectToActualBrowser()) {
      // Show redirect message and stop further execution
      setMessage('ðŸ”„ Redirecting to browser...');
      setIsLoading(false);
      return;
    }

    // Decode configuration from URL
    const decodeConfigFromUrl = () => {
      try {
        // Remove random prefix and timestamp suffix to get the encoded config
        // The format is: {random}{encodedConfig}{timestamp}
        // We need to extract the middle part (encodedConfig)
        
        // Remove first 6 characters (random) and last 8-10 characters (timestamp)
        const urlWithoutRandomAndTime = configId.substring(6, configId.length - 8);
        
        // Restore base64 padding and characters
        let base64Config = urlWithoutRandomAndTime.replace(/-/g, '+').replace(/_/g, '/');
        while (base64Config.length % 4) {
          base64Config += '=';
        }
        
        // Decode the configuration
        const configString = atob(base64Config);
        const compactConfig = JSON.parse(configString);
        
        // Expand the compact config back to full format
        setSettings({
          youtubeChannelId: compactConfig.c,
          youtubeChannelName: compactConfig.n,
          youtubeSubscribeUrl: compactConfig.s,
          pdfDownloadUrl: compactConfig.p
        });
        
      } catch (error) {
        console.error('Failed to decode configuration:', error);
        setMessage('Invalid or corrupted link. Please check the URL.');
      }
      setIsLoading(false);
    };

    decodeConfigFromUrl();
  }, [configId]);


  const handleDownloadPDF = () => {
    if (!hasSubscribed) {
      setMessage('Please subscribe to the channel first to download the PDF.');
      return;
    }

    setIsDownloading(true);
    setMessage('Opening PDF download...');
    
    window.open(settings.pdfDownloadUrl, '_blank');
    
    setTimeout(() => {
      setIsDownloading(false);
      setMessage('PDF download opened in new tab!');
    }, 1000);
  };

  if (isLoading) {
    const userAgent = navigator.userAgent.toLowerCase();
    const isEmbedded = 
      userAgent.includes('youtubeapp') ||
      userAgent.includes('youtube') ||
      userAgent.includes('wv') ||
      userAgent.includes('webview') ||
      userAgent.includes('instagram') ||
      userAgent.includes('fban') ||
      userAgent.includes('fbav') ||
      window.self !== window.top;
    
    if (isEmbedded || message.includes('Redirecting')) {
      return (
        <div style={{ 
          display: 'flex', 
          flexDirection: 'column',
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '100vh',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          textAlign: 'center',
          padding: '2rem',
          fontFamily: 'Arial, sans-serif'
        }}>
          <div style={{ 
            background: 'rgba(255,255,255,0.1)', 
            borderRadius: '20px', 
            padding: '3rem 2rem',
            backdropFilter: 'blur(10px)',
            maxWidth: '400px',
            width: '100%'
          }}>
            <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>ðŸš€</div>
            <h2 style={{ margin: '0 0 1rem 0', fontSize: '1.5rem' }}>
              Opening in Browser
            </h2>
            <p style={{ margin: '0 0 2rem 0', fontSize: '1.1rem', opacity: 0.9 }}>
              For the best experience, we're redirecting you to your browser
            </p>
            <div style={{ fontSize: '0.9rem', opacity: 0.8, lineHeight: '1.5' }}>
              <p>If the redirect doesn't work:</p>
              <p style={{ 
                background: 'rgba(255,255,255,0.2)', 
                padding: '0.8rem', 
                borderRadius: '8px', 
                wordBreak: 'break-all',
                fontSize: '0.8rem',
                fontFamily: 'monospace'
              }}>
                {window.location.href}
              </p>
              <p style={{ fontSize: '0.8rem', marginTop: '1rem' }}>
                Copy this URL and open it in Chrome or Safari
              </p>
            </div>
          </div>
        </div>
      );
    }
    
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        fontSize: '1.2rem',
        color: '#666'
      }}>
        Loading configuration...
      </div>
    );
  }

  return (
    <div className="App">
      <div className="hero">
        <div className="container">
          <h1>{settings.youtubeChannelName}</h1>
          <p>Subscribe to get exclusive educational content and resources</p>
        </div>
      </div>

      <div className="container">
        <div className="simple-layout">
          <div className="main-card">
            <div className="card-header">
              <h2>ðŸ“š Get Your Free PDF Resource</h2>
              <p>Subscribe to {settings.youtubeChannelName}'s YouTube channel and download exclusive study material</p>
            </div>

            <div className="two-button-layout">
              <a 
                href={settings.youtubeSubscribeUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="btn btn-subscribe"
                role="button"
                onClick={(e) => {
                  // Ensure it opens in browser even if in webview
                  if (window.navigator.userAgent.includes('wv') || window.navigator.userAgent.includes('WebView')) {
                    e.preventDefault();
                    window.open(settings.youtubeSubscribeUrl, '_blank', 'noopener,noreferrer');
                  }
                  setHasSubscribed(true);
                  setMessage('YouTube opened in browser! Please subscribe and return to this tab to download PDF.');
                }}
              >
                ðŸ“º Subscribe to Channel
              </a>
              
              <button 
                className="btn btn-download"
                onClick={handleDownloadPDF}
                disabled={!hasSubscribed || isDownloading}
              >
                {isDownloading ? (
                  <>
                    <span className="loading"></span>
                    Opening PDF...
                  </>
                ) : (
                  'ðŸ“„ Download PDF'
                )}
              </button>
            </div>

            {message && (
              <div className={`message ${hasSubscribed ? 'success' : 'info'}`}>
                {message}
              </div>
            )}


            <div className="instructions">
              <p><strong>How it works:</strong></p>
              <ol>
                <li>Click "Subscribe to Channel" - it will open YouTube</li>
                <li>Subscribe to {settings.youtubeChannelName}'s channel</li>
                <li>Come back and click "Download PDF"</li>
              </ol>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<MainApp />} />
        <Route path="/c/:configId" element={<ConfigurableApp />} />
        <Route path="/admin" element={<AdminRoute />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;